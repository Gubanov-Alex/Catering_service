"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from os import getenv
from pathlib import Path

from django.conf.global_settings import EMAIL_BACKEND
from django.core.mail.backends.smtp import EmailBackend

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-%463q=068%_nf)pb0mtw!s*rephikrbrv0bgonmv+1n6tgmh(n'
SECRET_KEY = getenv(
    "SECRET_KEY",
    default="django-insecure-%463q=068%_nf)pb0mtw!s*rephikrbrv0bgonmv+1n6tgmh(n",
)


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG: bool = (
    True if getenv("DEBUG", "false").lower() in ("true", "1", "on", "yes") else False
)


ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "grappelli",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3-rd party
    "rest_framework",
    "rest_framework_simplejwt",
    # Custom
    "food",
    "logistic",
    "users",
    "shared",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "catering",
#         "USER": "postgres",
#         "PASSWORD": "postgres",
#         "HOST": "localhost",
#         "PORT": "5435",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": getenv("DATABASE_NAME", "catering"),
        "USER": getenv("DATABASE_USER", "postgres"),
        "PASSWORD": getenv("DATABASE_PASSWORD", "postgres"),
        "HOST": getenv("DATABASE_HOST", "localhost"),
        "PORT": getenv("DATABASE_PORT", 5435),
        # "ATOMIC_REQUESTS": False,
    }
}


# Cache
# CACHE_CONNECTION_STRING = "redis://localhost:6379/0"
CACHE_CONNECTION_STRING = getenv("CACHE_URL", default="redis://localhost:6379/0")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.AllowAny',
#     ],
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.BasicAuthentication',
#     ],
# }

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/


LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# from rest_framework.permissions import DjangoModelPermissionsOrAnonReadOnly
# DRF
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
}

# client -> password + login
# server -> access token + refresh token
# client -> token -> request
# server -> validated token -> user by identifier -> process request -> response
SIMPLE_JWT = {
    # "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    # "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ACCESS_TOKEN_LIFETIME": getenv(
        "ACCESS_TOKEN_LIFETIME", default=timedelta(minutes=60)
    ),
    "REFRESH_TOKEN_LIFETIME": getenv(
        "REFRESH_TOKEN_LIFETIME", default=timedelta(days=1)
    ),
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}


AUTH_USER_MODEL = "users.User"

# MAILING SECTION
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_HOST = "localhost"
# EMAIL_PORT = 1025
# EMAIL_HOST_USER = "mailpit"
# EMAIL_HOST_PASSWORD = "mailpit"

EMAIL_BACKEND = getenv(
    "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = getenv("EMAIL_HOST", default="localhost")
EMAIL_PORT = getenv("EMAIL_PORT", default=1025)
EMAIL_HOST_USER = getenv("EMAIL_HOST_USER", default="mailpit")
EMAIL_HOST_PASSWORD = getenv("EMAIL_HOST_PASSWORD", default="mailpit")


# CELERY SECTION
# settings ref: https://docs.celeryq.dev/en/stable/userguide/configuration.html
CELERY_BROKER_URL = getenv("BROKER_URL", default="redis://localhost:6380/0")
# CELERY_BROKER_URL = "redis://localhost:6380/0"
CELERY_ACCEPT_CONTENT = ["pickle", "application/json", "application/x-python-serialize"]
CELERY_TASK_SERIALIZER = "pickle"
CELERY_EVENT_SERIALIZER = "pickle"


# PROVIDERS SECTION
MELANGE_BASE_URL = getenv(
    "MELANGE_BASE_URL", default="http://localhost:8001/api/orders"
)
BUENO_BASE_URL = getenv("BUENO_BASE_URL", default="http://localhost:8002")
UKLON_BASE_URL = getenv(
    "UKLON_BASE_URL", default="http://localhost:8003/drivers/orders"
)
UBER_BASE_URL = getenv("UBER_BASE_URL", default="http://localhost:8004/drivers/orders")
